trigger:
  branches:
    include:
      - arcbox_pipeline
  paths:
    include:
      - azure_jumpstart_arcbox/*

parameters:
- name: ResourceGroupName
  displayName: 'Resource Group Name'
  type: string
  default: 'arcbox-itpro-integration-tests'
- name: AzureSubscription
  displayName: 'Azure Subscription'
  type: string
  default: 'HCIBox-ServiceConnection'
- name: githubAccount
  displayName: 'githubAccount'
  type: string
  default: 'microsoft'
- name: githubBranch
  displayName: 'githubBranch'
  type: string
  default: 'arcbox_pipeline'
- name: flavor
  displayName: 'flavor'
  type: string
  default: 'ITPro'

variables:
- group: 'integration-tests'
- name: ResourceGroupName
  value: ${{parameters.ResourceGroupName}}
- name: githubAccount
  value: ${{parameters.githubAccount}}
- name: githubBranch
  value: ${{parameters.githubBranch}}
- name: flavor
  value: ${{parameters.flavor}}

stages:
- stage: 'ArcBox_deployment'
  jobs:
  - job: Deploy
    timeoutInMinutes: 235 # 5 minutes before the ACA self-hosted runner in order for the runner to gracefully shutdown
    pool:
      name: 'localbox-pool'
      #vmImage: 'ubuntu-latest'
    continueOnError: 'true'
    steps:
    - task: AzurePowerShell@5
      displayName: 'Deploy resource group'
      inputs:
        azureSubscription: ${{parameters.AzureSubscription}}
        ScriptType: 'InlineScript'
        azurePowerShellVersion: 'LatestVersion'
        Inline: |
          Write-Host "Running deployment from machine $(hostname) and public IP $(irm ifconfig.me/ip)"
          $RGname = "$(ResourceGroupName)"
          New-AzResourceGroup -Name $RGname -Location "eastus"

    - task: AzurePowerShell@5
      displayName: 'Deploy Bicep template'
      inputs:
        azureSubscription: ${{parameters.AzureSubscription}}
        ScriptType: 'InlineScript'
        azurePowerShellVersion: 'LatestVersion'
        Inline: |
          Write-Host "Deploying to $(ResourceGroupName)"
          $githubAccount = "$(githubAccount)"
          $githubBranch = "$(githubBranch)"
          $flavor = "$(flavor)"
          if ($githubAccount -ne "microsoft") {
            Write-Host "Checking out $githubAccount/$githubBranch"
            git remote add upstream https://github.com/$($githubAccount)/azure_arc.git
            git fetch upstream
            git checkout -b $githubBranch upstream/$githubBranch
          }
          New-AzResourceGroupDeployment -Name ArcBox `
          -ResourceGroupName $(ResourceGroupName) `
          -TemplateFile azure_jumpstart_arcbox/bicep/main.bicep `
          -TemplateParameterObject @{ `
              windowsAdminUsername = "arcdemo" ; `
              flavor = $flavor ; `
              deployBastion = $false ; `
              githubAccount = $githubAccount ; `
              githubBranch = $githubBranch ; `
              vmAutologon = $true ; `
              rdpPort = "3389" `
          }


    - task: AzurePowerShell@5
      displayName: 'Upload Pester test-results from ArcBox VM'
      inputs:
        azureSubscription: ${{parameters.AzureSubscription}}
        ScriptType: FilePath
        azurePowerShellVersion: 'LatestVersion'
        ScriptPath: 'azure_jumpstart_arcbox/artifacts/integration_tests/scripts/Wait-ArcBoxDeployment.ps1'
        ScriptArguments: -ResourceGroupName $(ResourceGroupName) -githubAccount $(githubAccount) -githubBranch $(githubBranch)

    - task: AzurePowerShell@5
      displayName: 'Download Pester test-results from storage account to pipeline agent'
      inputs:
        azureSubscription: ${{parameters.AzureSubscription}}
        ScriptType: FilePath
        azurePowerShellVersion: 'LatestVersion'
        ScriptPath: 'azure_jumpstart_arcbox/artifacts/integration_tests/scripts/Get-PesterResult.ps1'
        ScriptArguments: -ResourceGroupName $(ResourceGroupName)

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: '$(System.DefaultWorkingDirectory)/testresults/*.xml'

- stage: destroy
  displayName: 'ArcBox_teardown'
  #condition: succeeded('deploy')
  jobs:
  - deployment:
    displayName: "Get approval"
    environment: 'teardown_approval'
  - job: Delete
    steps:
    - task: AzurePowerShell@5
      displayName: 'Delete resource group'
      inputs:
        azureSubscription: ${{parameters.AzureSubscription}}
        ScriptType: 'InlineScript'
        azurePowerShellVersion: 'LatestVersion'
        Inline: |
          Write-Host "Deleting resource group $(ResourceGroupName)"
          Remove-AzResourceGroup -Name $(ResourceGroupName) -Force -WhatIf