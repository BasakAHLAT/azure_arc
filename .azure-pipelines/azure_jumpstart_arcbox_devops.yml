trigger:
  branches:
    include:
      - arcbox_pipeline
  paths:
    include:
      - azure_jumpstart_arcbox/*

schedules:
- cron: "55 19 * * *"
  displayName: Daily 19:55 UTC
  branches:
    include:
      - arcbox_pipeline
  always: true

parameters:
- name: ResourceGroupNamePrefix
  displayName: 'Resource Group Name'
  type: string
  default: 'arcbox-devops-integration-tests'
- name: Location
  displayName: 'Location'
  type: string
  default: 'northeurope'
- name: AzureSubscription
  displayName: 'Azure Subscription'
  type: string
  default: 'HCIBox-ServiceConnection'
- name: githubAccount
  displayName: 'githubAccount'
  type: string
  default: 'microsoft'
- name: githubBranch
  displayName: 'githubBranch'
  type: string
  default: 'arcbox_pipeline'
- name: flavor
  displayName: 'flavor'
  type: string
  default: 'DevOps'

variables:
#- group: 'integration-tests'
- name: ResourceGroupNamePrefix
  value: ${{parameters.ResourceGroupNamePrefix}}
- name: githubAccount
  value: ${{parameters.githubAccount}}
- name: githubBranch
  value: ${{parameters.githubBranch}}
- name: flavor
  value: ${{parameters.flavor}}
- name: Location
  value: ${{parameters.Location}}

stages:
- stage: 'ArcBox_deployment'
  jobs:
  - job: Deploy
    timeoutInMinutes: 235 # 5 minutes before the ACA self-hosted runner in order for the runner to gracefully shutdown
    pool:
      name: 'localbox-pool'
      #vmImage: 'ubuntu-latest'
    continueOnError: 'true'
    steps:
    - task: AzurePowerShell@5
      displayName: 'Deploy resource group'
      inputs:
        azureSubscription: ${{parameters.AzureSubscription}}
        ScriptType: 'InlineScript'
        azurePowerShellVersion: 'LatestVersion'
        Inline: |
          Write-Host "Running deployment from machine $(hostname) and public IP $(irm ifconfig.me/ip)"
          $dateSuffix = (Get-Date -Format "yyyy-MM-dd-HH-mm")
          $RGname = "$(ResourceGroupNamePrefix)-$dateSuffix"
          Write-Host "##vso[task.setvariable variable=RGname;isOutput=true]$RGname"
          New-AzResourceGroup -Name $RGname -Location "$(Location)" -Force
          Write-Host "Resource group $RGname created."

    - task: AzurePowerShell@5
      displayName: 'Deploy Bicep template'
      inputs:
        azureSubscription: ${{parameters.AzureSubscription}}
        ScriptType: 'InlineScript'
        azurePowerShellVersion: 'LatestVersion'
        Inline: |
          Write-Host "Deploying to $(RGname)"
          $githubAccount = "$(githubAccount)"
          $githubBranch = "$(githubBranch)"
          $flavor = "$(flavor)"
          if ($githubAccount -ne "microsoft") {
            Write-Host "Checking out $githubAccount/$githubBranch"
            git remote add upstream https://github.com/$($githubAccount)/azure_arc.git
            git fetch upstream
            git checkout -b $githubBranch upstream/$githubBranch
          }
          New-AzResourceGroupDeployment -Name ArcBox `
          -ResourceGroupName $(RGname) `
          -TemplateFile azure_jumpstart_arcbox/bicep/main.bicep `
          -TemplateParameterObject @{ `
              windowsAdminUsername = "arcdemo" ; `
              flavor = $flavor ; `
              customLocationRPOID = "d7c8af5d-5320-435c-8d61-88d4cc0f345d" ; `
              deployBastion = $false ; `
              sshRSAPublicKey = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCsdlSaF10Uw0fFysiIV0VYeJGE1CaV0ZjZcakcKgafiqZ04sAzf7KnoIjPVyx6LXoDTKGtv1e5eFjRZA7Z0Bu+a3JqY252/yr/B2R3Mu5qZHbKFncpVEXn7sUmYk4rDG5vToFxbhpKX5EGyvM1M0quoUv3Uv9reBsSDdjk7n7oA2Q+89rj4nfRuTEMQRwvNBaLeNRSlWuzPq4EkpwxSWRzIC2auC5K0rxGiTMPTXMOQ3l0DvzKRoEsygHA4c3uw0PTntSlgSSTgtGdQfuX63hAD4QPTVfeQdsW5+Nq3clr+6SHgeGdwHhKjUVTF+E2olfSYtuV4CqPW8dZdDBOZg7pXLMSVumZVKCZiUV6uBJkvLBRMzMiFsfXOVrgyThMqq+8y4tg/V3l/3S8z5Lngy4WoCAQMHQ1SloPmy9s4QnbjCFEQx/cIq9H+Uw6HAYhdQFh/w/tuIP+KIqOpMOrltZuaoqx3AOOL3BPXJMbv3opiZxCEZQFf68n+Zn6uRc9u1EENA9s1DrjG1j/CHWzbX/t63Ig/xQLgKLu9T+evua3dcWsYc3j1Gvk8R+ioXV7x0/fi6twrhSQxBIIL0D2Pxm8TBfJ3mVXk0kYGGq1mBsoxAzjoBhcbdwUMXHbAksj4/UuuAK5VfH278hlXo/BHSgDLZ98fdS63nq7rIr6qWmBrQ==" ; `
              githubAccount = $githubAccount ; `
              githubBranch = $githubBranch ; `
              vmAutologon = $true ; `
              rdpPort = "3389" `
          }

# Need to run this script multiple times to avoid Azure PowerShell authentication cache issues when run for more than 60 minutes
    - task: AzurePowerShell@5
      displayName: 'Upload Pester test-results from ArcBox VM - 1'
      inputs:
        azureSubscription: ${{parameters.AzureSubscription}}
        ScriptType: FilePath
        azurePowerShellVersion: 'LatestVersion'
        ScriptPath: 'azure_jumpstart_arcbox/artifacts/integration_tests/scripts/Wait-ArcBoxDeployment.ps1'
        ScriptArguments: -ResourceGroupName $(RGname) -githubAccount $(githubAccount) -githubBranch $(githubBranch)

    - task: AzurePowerShell@5
      displayName: 'Upload Pester test-results from ArcBox VM - 2'
      inputs:
        azureSubscription: ${{parameters.AzureSubscription}}
        ScriptType: FilePath
        azurePowerShellVersion: 'LatestVersion'
        ScriptPath: 'azure_jumpstart_arcbox/artifacts/integration_tests/scripts/Wait-ArcBoxDeployment.ps1'
        ScriptArguments: -ResourceGroupName $(RGname) -githubAccount $(githubAccount) -githubBranch $(githubBranch)

    - task: AzurePowerShell@5
      displayName: 'Upload Pester test-results from ArcBox VM - 3'
      inputs:
        azureSubscription: ${{parameters.AzureSubscription}}
        ScriptType: FilePath
        azurePowerShellVersion: 'LatestVersion'
        ScriptPath: 'azure_jumpstart_arcbox/artifacts/integration_tests/scripts/Wait-ArcBoxDeployment.ps1'
        ScriptArguments: -ResourceGroupName $(RGname) -githubAccount $(githubAccount) -githubBranch $(githubBranch)

    - task: AzurePowerShell@5
      displayName: 'Download Pester test-results from storage account to pipeline agent'
      inputs:
        azureSubscription: ${{parameters.AzureSubscription}}
        ScriptType: FilePath
        azurePowerShellVersion: 'LatestVersion'
        ScriptPath: 'azure_jumpstart_arcbox/artifacts/integration_tests/scripts/Get-PesterResult.ps1'
        ScriptArguments: -ResourceGroupName $(RGname)

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: '$(System.DefaultWorkingDirectory)/testresults/*.xml'

- stage: destroy
  displayName: 'ArcBox_teardown'
  #condition: succeeded('deploy')
  variables:
    RGname: $[ stageDependencies.ArcBox_deployment.Deploy.outputs['SetRG.RGname'] ]
  jobs:
  - deployment:
    displayName: "Get approval"
    environment: 'arcbox_teardown_approval'
  - job: Delete
    steps:
    - task: AzurePowerShell@5
      displayName: 'Delete resource group'
      inputs:
        azureSubscription: ${{parameters.AzureSubscription}}
        ScriptType: 'InlineScript'
        azurePowerShellVersion: 'LatestVersion'
        Inline: |
          Write-Host "Deleting resource group $(RGname)"
          Remove-AzResourceGroup -Name $(RGname) -Force